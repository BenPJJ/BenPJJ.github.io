<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[css元素]]></title>
    <url>%2F2018%2F05%2F18%2Fcss%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[#]]></content>
  </entry>
  <entry>
    <title><![CDATA[css选择器权重]]></title>
    <url>%2F2018%2F05%2F18%2Fcss%E6%9D%83%E9%87%8D%2F</url>
    <content type="text"><![CDATA[CSS优先级权重计算法 例如：12345678910#id(100) &gt; .class(10) &gt; 标签选择符(1)细分标签内选择符(1000)&gt;ID选择符(100)&gt;Class选择符(10)&gt;元素选择符(1)标签内选择符:元素标签中定义的样式（Style属性）.class||伪类':active,:focus,:hover,:link,:visited,:first-child,:lang'||属性选择符'[title]'(10)标签||伪元素选择符':first-letter,:first-line,:before,:after'(1)通配符'*'(0)]]></content>
  </entry>
  <entry>
    <title><![CDATA[dl表格]]></title>
    <url>%2F2018%2F05%2F18%2Fdl%E8%A1%A8%E6%A0%BC%2F</url>
    <content type="text"><![CDATA[html dl dt dd标签元素语法结构与使用1,语法 例如：123456&lt;dl&gt; &lt;dt&gt;列表标题&lt;/dt&gt; &lt;dd&gt;列表内容&lt;/dd&gt; &lt;dd&gt;列表内容&lt;/dd&gt; ...&lt;/dl&gt; 是一组合标签,使用了dt dd最外层就必须使用dl包裹。]]></content>
  </entry>
  <entry>
    <title><![CDATA[ES5(04)]]></title>
    <url>%2F2018%2F05%2F14%2Fes5(04)%2F</url>
    <content type="text"><![CDATA[函数1,概述函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值。1)函数的声明JavaScript 有三种声明函数的方法。 例如：1234567891011121314151617181920//function 命令function print(s)&#123; console.log(s);&#125;//函数表达式var print = function(s)&#123; console.log(s);&#125;;//如果加上函数名，该函数名只在函数体内部有效，在函数体外部无效。var print = function x()&#123; console.log(typeof x);&#125;;//Function 构造函数var add = new Function( 'x', 'y', 'return x+y'); 2)函数的重复声明如果同一个函数被多次声明，后面的声明就会覆盖前面的声明。 3)圆括号运算符，return 语句和递归调用函数时，要使用圆括号运算符。 return语句所带的那个表达式，就是函数的返回值。 函数可以调用自身，这就是递归（recursion）。 例如：1234567function fib(num)&#123; if(num ===0) return 0; if(num ===1) return 1; return fib(num-2) + fib(num-1);&#125;fib(6)//8 4)第一等公民JavaScript 语言将函数看作一种值，与其它值（数值、字符串、布尔值等等）地位相同。 例如：123456789101112131415function add(x,y)&#123; return x+y;&#125;// 将函数赋值给一个变量var a = add;// 将函数作为参数和返回值function a(op)&#123; return op;&#125;a(add(1,2));等价于a(add)(1,2); 5)函数名的提升 例如：123456789101112131415161718192021222324//代码不会报错，整个函数会像变量声明一样，被提升到代码头部。f();function f();//采用赋值语句定义函数，JavaScript 就会报错。f();var f = function()&#123;&#125;等价于var f;f();f = function()&#123;&#125;//如果同时采用function命令和赋值语句声明同一个函数，最后总是采用赋值语句的定义。var f = function()&#123; console.log('1');&#125;function f()&#123; console.log('2');&#125;f() 6)不能在条件语句中声明函数 例如：12345678910//不得在非函数的代码块中声明函数，最常见的情况就是if和try语句。if (foo) &#123; function x() &#123;&#125;&#125;try &#123; function x() &#123;&#125;&#125; catch(e) &#123; console.log(e);&#125; 2,函数的属性和方法1)name 属性函数的name属性返回函数的名字。 例如：123456789101112131415function f()&#123;&#125;f.name //fvar f = function ()&#123;&#125;f.name //fvar f = function myName()&#123;&#125;f.name //myNamevar myFunc = function ()&#123;&#125;function test(f)&#123; console.log(f.name);&#125;test(myFunc) //myFunc 2)length 属性 例如：12function f(a,b)&#123;&#125;f.length //2 length属性就是定义时的参数个数。不管调用时输入了多少个参数，length属性始终等于2。 3)toString()函数的toString方法返回一个字符串，内容是函数的源码。 例如：123456function f()&#123; a(); b(); c();&#125;f.toString(); 3,函数作用域1)定义作用域（scope）指的是变量存在的范围。Javascript 只有两种作用域：一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在。 函数外部声明的变量就是全局变量（global variable），它可以在函数内部读取。 在函数内部定义的变量，外部无法读取，称为“局部变量”（local variable）。 2)函数内部的变量提升 例如：123456789101112function foo(x)&#123; if(x &gt;100)&#123; var tmp = x - 100; &#125;&#125;等价于function foo(x)&#123; var tmp; if(x &gt;100)&#123; tmp = x - 100; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[ES5(03)]]></title>
    <url>%2F2018%2F05%2F14%2Fes5(03)%2F</url>
    <content type="text"><![CDATA[错误处理机制1，Error 实例对象 例如：123var err = new Error('出错了');err.message JavaScript 语言标准只提到，Error实例对象必须有message属性，表示出错时的提示信息。而大多数 JavaScript 引擎，对Error实例还提供name和stack属性，分别表示错误的名称和错误的堆栈，但它们是非标准的，不是每种实现都有。 例如：123messagenamestack 2,Error的6个派生对象。1)SyntaxError 对象SyntaxError对象是解析代码时发生的语法错误。 例如：变量名错误缺少括号 2)ReferenceError 对象ReferenceError对象是引用一个不存在的变量时发生的错误。 例如：使用一个不存在的变量对函数的运行结果或者this赋值 3)RangeError 对象RangeError对象是一个值超出有效范围时发生的错误。 例如：数组长度为负数Number对象的方法参数超出范围函数堆栈超过最大值 4)TypeError 对象TypeError对象是变量或参数不是预期类型时发生的错误。 例如：对字符串、布尔值、数值等原始类型的值使用new命令，就会抛出这种错误，因为new命令的参数应该是一个构造函数调用对象不存在的方法 5)URIError 对象 6)EvalError 对象 3,throw 语句throw语句的作用是手动中断程序执行，抛出一个错误。 例如：123if(x&lt;0)&#123; throw new Error('x 必须为正数');&#125; throw可以抛出任何类型的值 4,try…catch 结构一旦发生错误，程序就中止执行了。JavaScript 提供了try…catch结构，允许对错误进行处理，选择是否往下执行。 例如：123456try &#123; throw new Error('出错了!');&#125; catch (e) &#123; console.log(e.name + ": " + e.message); console.log(e.stack);&#125; 5,finally 代码块try…catch结构允许在最后添加一个finally代码块，表示不管是否出现错误，都必需在最后运行的语句。]]></content>
  </entry>
  <entry>
    <title><![CDATA[ES5(02)]]></title>
    <url>%2F2018%2F05%2F14%2Fes5(02)%2F</url>
    <content type="text"><![CDATA[数据类型1,概况JavaScript 的数据类型，共有六种。 例如：12345678910111213141516 number(数值)：整数和小数(1,3.14) string(字符串)：文本(hello world) boolean(布尔值)：(true,false) undefined:未定义 null:空值 object:(对象) ``` 数值、字符串、布尔值这三种类型，合称为原始类型（primitive type）的值，即它们是最基本的数据类型，不能再细分了。对象则称为合成类型（complex type）的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。至于undefined和null，一般将它们看成两个特殊值。 对象是最复杂的数据类型，又可以分成三个子类型。 #### 例如： ```bash object(狭义的对象) array(数组) function(函数) 2,typeof 运算符JavaScript 有三种方法，可以确定一个值到底是什么类型。 例如：123typeof(运算符)instanceof(运算符)Object.prototype.toString(方法) typeof运算符可以返回一个值的数据类型。 例如：12345678910111213typeof 123 //numbeltypeof '123' //stringtypeof false //boobeanfunction f()&#123;&#125;typeof f //functiontypeof undefinedw //undefinedtypeof null //object typeof window //objecttypeof &#123;&#125; //objecttypeof [] //object typeof可以用来检查一个没有声明的变量，而不报错。 例如：12v //err:v is not definedtypeof v //undefined 这个特点通常用在判断语句。 例如：12345678//错误的写法if(v)&#123; //...&#125;//正确的写法if(typeof v ==== 'undefined')&#123; //...&#125; 3,null 和 undefined1)概述null与undefined都可以表示“没有”，含义非常相似。将一个变量赋值为undefined或null，老实说，语法效果几乎没区别。 例如：123var a = undefined;//或者var a = null; 在if语句中，它们都会被自动转为false，相等运算符（==）甚至直接报告两者相等。 例如：123456789101112131415if(!undefined)&#123; console.log('undefined is false');&#125; if(!null)&#123; console.log('null is false');&#125;if(undefined == null)&#123; console.log('在相等运算符的前提下相等');&#125;if(undefined === null)&#123; console.log('在严格相等运算符的前提下相等');&#125; 核心区别：null是一个表示“空”的对象，转为数值时为0；undefined是一个表示”此处无定义”的原始值，转为数值时为NaN。 例如：12345Number(undefined) //NaN5 + undefined //NaNNumber(null) //05 + null //5 2)用法和含义返回undefined的典型场景。 例如：12345678910111213141516171819// 变量声明了，但没有赋值。var i;// 调用函数时，应该提供的参数没有提供，该参数等于 undefinedfunction f(x)&#123; return x;&#125;f()// 对象没有赋值的属性var o = new Object();o.p // 函数没有返回值时，默认返回 undefinedfunction f()&#123;&#125;f() 4,布尔值1)下列运算符会返回布尔值： 例如：1234两元逻辑运算符：&amp;&amp;(and) ||(or) 前置逻辑运算符：!(not)相等运算符：=== !== == !=比较运算符：&gt; &gt;= &lt; &lt;= 2)除了下面六个值被转为false，其他值都视为true。 例如：123456undefined nullfalse0NaN''或""]]></content>
  </entry>
  <entry>
    <title><![CDATA[ES5(01)]]></title>
    <url>%2F2018%2F05%2F12%2Fes5(01)%2F</url>
    <content type="text"><![CDATA[语法一基本语法：1,语句和表达式的区别：1）前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。2)语句以分号结尾，一个分号就表示一个语句结束。多个语句可以写在一行内。 例如：1var a = 4;var b = 5; 分号前面可以没有任何内容，JavaScript引擎将其视为空语句。 例如：1;;; 3)表达式不需要分号结尾。一旦在表达式后面添加分号，则 JavaScript 引擎就将表达式视为语句，这样会产生一些没有任何意义的语句。 例如：121+2;'abc'; 2,变量1)JavaScript 的变量名区分大小写，A和a是两个不同的变量。2)变量的声明和赋值，是分开的两个步骤。 例如：1234var a = 1;等价于var a;a=1; 3)变量提升JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升。 例如：123456console.log(a);var a = 1;这时变量a还没有声明和赋值，所以这是一种错误的做法，但是实际上不会报错。因为存在变量提升，真正运行的是下面的代码。var a;console.log(a);//undefineda=1; 3,标识符1)标识符（identifier）指的是用来识别各种值的合法名称。常见的如变量名、函数名。JavaScript 语言的标识符对大小写敏感，所以a和A是两个不同的标识符。2)标识符有一套命名规则，不符合规则的就是非法标识符。JavaScript 引擎遇到非法标识符，就会报错。命名规则：第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（$）和下划线（_）。第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字0-9。 例如：1234567891011 合法arg0_tmpvar 临时变量 = 1；$elem 不合法 1a // 第一个字符不能是数字 23 *** // 标识符不能包含星号 a+b // 标识符不能包含加号 -d // 标识符不能包含减号或连词线 1JavaScript有一些保留字，不能用作标识符：arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield。 4,注释1)// 这是单行注释2)/ 这是 多行 注释 /5,区块1)JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block）。6,条件语句1)if 结构if结构先判断一个表达式的布尔值，然后根据布尔值的真伪，执行不同的语句。 例如：123if(m === 1)&#123; m = m+1;&#125; 赋值表达式（=）、严格相等运算符（===）和相等运算符（==）。尤其是赋值表达式不具有比较作用。 例如：12345 var x = 1; var y = 2;if(x = y)&#123; console.log(x);&#125; 常量不能被赋值。 例如：12if(2=x)&#123;&#125;//报错if(x=2)&#123;&#125;//不报错 2)if…else 结构3)switch结构多个if…else连在一起使用的时候，可以转为使用更方便的switch结构。 例如：123456789101112131415161718var x =2;if(x==0)&#123; console.log(x);&#125;else if(x==1)&#123; console.log(x);&#125;else&#123; console.log(x);&#125;等价于switch语句内部采用的是“严格相等运算符”。switch(x)&#123; case 1:console.log(x); break; case 2:console.log(x); break; default:console.log(x);&#125; 4)三元运算符 ?:如果“条件”为true，则返回“表达式1”的值，否则返回“表达式2”的值。 例如：1(条件) ? 表达式1 : 表达式2 7,循环语句1)while 循环 例如：12345var i =0;while(i&lt;100)&#123; console.log(i); i++;&#125; 2)for 循环 例如：123for(var i=0;i&lt;5;i++)&#123; console.log(i);&#125; 3)do…while 循环 例如：123456var a =1;var b =2;do&#123; console.log(a); a++;&#125;while(a&lt;b); 不管条件是否为真，do…while循环至少运行一次。另外，while语句后面的分号注意不要省略。4)break 语句和 continue 语句break语句和continue语句都具有跳转作用，可以让代码不按既有的顺序执行。break语句用于跳出代码块或循环。 例如：123456var i = 0;while(i &lt; 100) &#123; console.log('i 当前为：' + i); i++; if (i === 10) break; &#125; continue语句用于立即终止本轮循环，返回循环结构的头部，开始下一轮循环。 例如：123456var i = 0;while(i &lt; 100) &#123; i++; if (i%2 === 0) continue; console.log('i 当前为：' + i); &#125; 5)标签（label）JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置。标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句。标签通常与break语句和continue语句配合使用，跳出特定的循环。 例如：1234567top: for(var i=0;i&lt;3;i++)&#123; for(var j=0;j&lt;3;j++)&#123; if(i===1 &amp;&amp; j===1)break top; console.log('i='+i+',j='+j); &#125; &#125; 上面代码为一个双重循环区块，break命令后面加上了top标签（注意，top不用加引号），满足条件时，直接跳出双层循环。如果break语句后面不使用标签，则只能跳出内层循环，进入下一次的外层循环。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
